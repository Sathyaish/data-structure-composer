ds InvertibleReductionMemoizer[f] if f.invertible, f.commutative {
    reduce[f] <- 1
    insertAtIndex! <- 1
    updateNode! <- 1
    deleteNode! <- 1
}

If you want to maintain the sum of an array, it's super easy to do: just store it in a variable somewhere,
and add new items to it as they're added to the array, and subtract items as they're removed.

This works because addition is invertible and commutative.

This data structure does that for any invertible and commutative function `f`.
