ds ValueOrderedOrderStatisticTree[f] {
    unorderedEach <- n
    updateNode! <- log(n)

    // You can get the first and last elements in O(1) by storing a pointer to them
    getFirstBy[f] <- 1
    getLastBy[f] <- 1
    getKthBy[f] <- log(n)
    insertAtIndex! <- log(n)
    getFirstNodeWithValue[f] <- log(n)
    deleteNode! <- log(n)
    countBetweenBy[f] <- log(n)
    getNearest[f] <- log(n)
}

This is a balanced binary search tree ordered on `f`. Every node also maintains how many descendents it has,
which makes it an order statistic tree.

My favorite slides on order statistic trees and BST augmentation are [these ones](http://web.stanford.edu/class/cs166/lectures/06/Small06.pdf):
read from slide 8.

